import { createClient, deleteClientById, getClients, updateClient } from '$lib/api.server';
import type { Client, ClientPayload } from '$lib/types';
import type { Actions, PageServerLoad } from './$types';
import type { Cookies } from '@sveltejs/kit';

async function fetchClientsData(authInfo?: { token: string; user: any }, cookies?: Cookies): Promise<Client[]> {
  try {
    console.log('[fetchClientsData] Fetching with auth:', { hasAuthInfo: !!authInfo, hasCookies: !!cookies });
    const clients = await getClients(authInfo, cookies);
    return clients;
  } catch (error) {
    console.error('[fetchClientsData] Error fetching clients:', error);
    throw error;
  }
}

function generateClientListHTML(clients: Client[]): string {
  const currentDate = new Date().toLocaleDateString();
  
  const clientRows = clients.map(client => `
    <tr>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.clientid}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.first_name || 'N/A'}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.last_name || 'N/A'}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.dob ? new Date(client.dob).toLocaleDateString() : 'N/A'}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.phone || 'N/A'}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.email || 'N/A'}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.address || 'N/A'}</td>
      <td style="padding: 8px; border-bottom: 1px solid #ddd;">${client.insurance_provider || 'N/A'}</td>
    </tr>
  `).join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Client List Export</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 20px;
        }
        h1 {
          color: #333;
          border-bottom: 2px solid #333;
          padding-bottom: 10px;
        }
        .header-info {
          margin-bottom: 20px;
          color: #666;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
          padding: 50px;
        }
        th {
          background-color: #f8f9fa;
          padding: 10px 8px;
          text-align: left;
          font-weight: bold;
          border-bottom: 2px solid #333;
        }
        td {
          padding: 8px;
          border-bottom: 1px solid #ddd;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .footer {
          margin-top: 30px;
          text-align: center;
          color: #666;
          font-size: 12px;
        }
      </style>
    </head>
    <body>
      <h1>Client List Export</h1>
      <div class="header-info">
        <p>Export Date: ${currentDate}</p>
        <p>Total Clients: ${clients.length}</p>
      </div>
      
      <table>
        <thead>
          <tr>
            <th>Client ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Date of Birth</th>
            <th>Phone</th>
            <th>Email</th>
            <th>Address</th>
            <th>Insurance Provider</th>
          </tr>
        </thead>
        <tbody>
          ${clientRows}
        </tbody>
      </table>
      
      <div class="footer">
        <p>Generated by Patient Advocate - Dental Practice Management System</p>
      </div>
    </body>
    </html>
  `;
}

export const load: PageServerLoad = async ({ cookies, parent }) => {
  try {
    // Get session data from parent layout
    const { session } = await parent();

    console.log('[Clients] Page load - Session check:', {
      hasSession: !!session,
      hasUser: !!session?.user,
      hasAccessToken: !!session?.access_token,
      userId: session?.user?.id
    });

    // If no valid session, return empty data - don't try to fetch clients
    if (!session?.access_token || !session?.user) {
      console.log('[Clients] No valid session - returning empty client list');
      return {
        clients: [],
        userId: null,
        error: 'Authentication required'
      };
    }

    const userId = cookies.get('userId');
    const accessToken = cookies.get('accessToken');
    const authenticated = cookies.get('authenticated') === 'true';

    console.log('[Clients] Cookie check:', {
      hasUserId: !!userId,
      hasToken: !!accessToken,
      authenticated: authenticated,
      sessionUserId: session.user.id
    });

    // Use session token for API calls
    const authInfo = {
      token: session.access_token,
      user: session.user
    };

    const clients = await getClients(authInfo);

    console.log(`[Clients] Successfully loaded ${clients.length} clients`);

    return {
      clients: clients as Client[],
      userId: session.user.id
    };

  } catch (error) {
    console.error('[Clients] Error loading clients:', error);
    return {
      clients: [],
      userId: null,
      error: error instanceof Error ? error.message : 'Failed to load clients'
    };
  }
};

export const actions: Actions = {
  create: async ({ request, cookies }) => {
    try {
      const formData = await request.formData();
      const clientData: ClientPayload = {
        first_name: formData.get('first_name') as string,
        last_name: formData.get('last_name') as string,
        dob: formData.get('dob') as string || null,
        phone: formData.get('phone') as string || null,
        email: formData.get('email') as string || null,
        address: formData.get('address') as string || null,
        insurance_provider: formData.get('insurance_provider') as string || null,
      };

      // Validate required fields
      if (!clientData.first_name || !clientData.last_name) {
        return {
          success: false,
          error: 'First name and last name are required'
        };
      }

      const response = await createClient(clientData, undefined, cookies);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('ðŸš¨ Create client API Error:', {
          status: response.status,
          statusText: response.statusText,
          errorBody: errorText
        });
        return {
          success: false,
          error: `Failed to create client: ${response.statusText}`
        };
      }

      const result = await response.json();
      // console.log('âœ… Client created:', result);

      // Refresh the client list after creation
      const authInfo = { token: cookies.get('accessToken') || '', user: { id: cookies.get('userId') } };
      const updatedClients = await fetchClientsData(authInfo, cookies);

      return {
        success: true,
        clients: updatedClients,
        message: `Client ${clientData.first_name} ${clientData.last_name} created successfully`
      };
    } catch (error) {
      console.error('Error creating client:', error);
      return {
        success: false,
        error: 'Failed to create client'
      };
    }
  },

  refresh: async ({ cookies }) => {
    try {
      const authInfo = { token: cookies.get('accessToken') || '', user: { id: cookies.get('userId') } };
      const clients = await fetchClientsData(authInfo, cookies);
      // console.log('ðŸ”„ Clients refreshed:', clients.length);
      
      return {
        success: true,
        clients: clients as Client[]
      };
    } catch (error) {
      // console.error('Error refreshing clients:', error);
      return {
        success: false,
        error: 'Failed to refresh clients'
      };
    }
  },

  delete: async ({ request, cookies }) => {
    try {
      const formData = await request.formData();
      const clientIds = formData.get('clientIds') as string;
      
      if (!clientIds) {
        return {
          success: false,
          error: 'No clients selected for deletion'
        };
      }

      const ids = JSON.parse(clientIds) as number[];
      let deletedCount = 0;
      const errors: string[] = [];

      // Delete each client individually
      for (const clientId of ids) {
        try {
          const response = await deleteClientById(clientId.toString(), undefined, cookies);

          if (!response.ok) {
            const errorText = await response.text();
            errors.push(`Client ${clientId}: ${errorText}`);
          } else {
            deletedCount++;
          }
        } catch (error) {
          errors.push(`Client ${clientId}: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }

      // Refresh the client list after deletion
      const authInfo = { token: cookies.get('accessToken') || '', user: { id: cookies.get('userId') } };
      const updatedClients = await fetchClientsData(authInfo, cookies);

      if (errors.length === 0) {
        return {
          success: true,
          clients: updatedClients,
          message: `Successfully deleted ${deletedCount} client(s)`
        };
      } else {
        return {
          success: false,
          clients: updatedClients,
          error: `Deleted ${deletedCount} client(s), but encountered errors: ${errors.join('; ')}`
        };
      }
    } catch (error) {
      console.error('Error deleting clients:', error);
      return {
        success: false,
        error: 'Failed to delete clients'
      };
    }
  },

  update: async ({ request, cookies }) => {
    try {
      const formData = await request.formData();
      const clientId = formData.get('clientId') as string;
      const clientData: ClientPayload = {
        first_name: formData.get('first_name') as string,
        last_name: formData.get('last_name') as string,
        dob: formData.get('dob') as string || null,
        phone: formData.get('phone') as string || null,
        email: formData.get('email') as string || null,
        address: formData.get('address') as string || null,
        insurance_provider: formData.get('insurance_provider') as string || null,
      };

      // Validate required fields
      if (!clientId || !clientData.first_name || !clientData.last_name) {
        return {
          success: false,
          error: 'Client ID, first name, and last name are required'
        };
      }

      const response = await updateClient(clientId, clientData, undefined, cookies);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('ðŸš¨ Update client API Error:', {
          status: response.status,
          statusText: response.statusText,
          errorBody: errorText
        });
        return {
          success: false,
          error: `Failed to update client: ${response.statusText}`
        };
      }

      const result = await response.json();
      console.log('âœ… Client updated:', result);

      // Refresh the client list after update
      const authInfo = { token: cookies.get('accessToken') || '', user: { id: cookies.get('userId') } };
      const updatedClients = await fetchClientsData(authInfo, cookies);

      return {
        success: true,
        clients: updatedClients,
        message: `Client ${clientData.first_name} ${clientData.last_name} updated successfully`
      };
    } catch (error) {
      console.error('Error updating client:', error);
      return {
        success: false,
        error: 'Failed to update client'
      };
    }
  },

  export: async ({ request, cookies }) => {
    try {
      const formData = await request.formData();
      const clientIds = formData.get('clientIds') as string;

      if (!clientIds) {
        return {
          success: false,
          error: 'No clients selected for export'
        };
      }

      const ids = JSON.parse(clientIds) as number[];
      const authInfo = { token: cookies.get('accessToken') || '', user: { id: cookies.get('userId') } };
      const allClients = await fetchClientsData(authInfo, cookies);
      const selectedClients = allClients.filter(client => ids.includes(client.clientid));

      if (selectedClients.length === 0) {
        return {
          success: false,
          error: 'Selected clients not found'
        };
      }

      // Generate HTML for PDF export
      const html = generateClientListHTML(selectedClients);

      // Use the existing PDF generation API
      const pdfResponse = await fetch('https://pdf-gen-pi.vercel.app/api/pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ html })
      });

      if (!pdfResponse.ok) {
        return {
          success: false,
          error: 'Failed to generate PDF'
        };
      }

      const pdfBuffer = await pdfResponse.arrayBuffer();
      const pdfBase64 = Buffer.from(pdfBuffer).toString('base64');

      return {
        success: true,
        pdfData: pdfBase64,
        filename: `clients-export-${new Date().toISOString().split('T')[0]}.pdf`
      };
    } catch (error) {
      console.error('Error exporting clients:', error);
      return {
        success: false,
        error: 'Failed to export clients'
      };
    }
  }
};
